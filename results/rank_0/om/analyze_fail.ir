# 1.This file shows the parsed IR info when graph evaluating failed to help find the problem.
# 2.You can search the last `------------------------>` to the node which is inferred failed.
# 3.Refer to https://www.mindspore.cn/search?inputValue=analyze_fail.ir to get more instructions.
# ===============================================================================

subgraph attr:
subgraph instance: construct.Default.462 : 0000022657DDEE00
# In file C:\Users\Moran\Desktop\Code\Deep-Reinforcement-Learning-Algorithms-with-MindSpore\agents\Base_Agent.py:450/    def construct(self, x):/
subgraph @construct.Default.462(%para1_x, %para2_nets.0.bias, %para3_nets.0.weight, %para4_nets.3.bias, %para5_nets.3.weight, %para6_nets.6.bias, %para7_nets.6.weight) {
  %1([CNode]474) = call @bool_.473(())
      : (<Tuple[], TupleShape()>) -> (<Bool, NoShape>)
      #scope: (Default)
      # In file C:\Users\Moran\Desktop\Code\Deep-Reinforcement-Learning-Algorithms-with-MindSpore\agents\Base_Agent.py:452/        if self.y_range:/
  %2([CNode]475) = Switch(%1, call @construct.Default.476, call @construct.Default.464)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default)
      # In file C:\Users\Moran\Desktop\Code\Deep-Reinforcement-Learning-Algorithms-with-MindSpore\agents\Base_Agent.py:452/        if self.y_range:/

#------------------------> 0
  %3([CNode]477) = %2()
      #scope: (Default)
      # In file C:\Users\Moran\Desktop\Code\Deep-Reinforcement-Learning-Algorithms-with-MindSpore\agents\Base_Agent.py:452/        if self.y_range:/
  %4([CNode]479) = call @construct.Default.478(%3)
      : (<null>) -> (<null>)
      #scope: (Default)
  Return(%4)
      : (<null>)
      #scope: (Default)
      # In file C:\Users\Moran\Desktop\Code\Deep-Reinforcement-Learning-Algorithms-with-MindSpore\agents\Base_Agent.py:452/        if self.y_range:/
}
# Order:
#   1: @construct.Default.462:x{[0]: ValueNode<FuncGraph> construct.SequentialCell.465, [1]: x}
#   2: @construct.Default.462:[CNode]474{[0]: ValueNode<FuncGraph> bool_.473, [1]: ValueNode<ValueTuple> ()}
#   3: @construct.Default.462:[CNode]475{[0]: ValueNode<Primitive> Switch, [1]: [CNode]474, [2]: ValueNode<FuncGraph> construct.Default.476, [3]: ValueNode<FuncGraph> construct.Default.464}
#   4: @construct.Default.462:[CNode]477{[0]: [CNode]475}
#   5: @construct.Default.462:[CNode]479{[0]: ValueNode<FuncGraph> construct.Default.478, [1]: [CNode]477}
#   6: @construct.Default.462:[CNode]480{[0]: ValueNode<Primitive> Return, [1]: [CNode]479}


subgraph attr:
subgraph instance: construct.Default.464 : 0000022657DE1330
# In file C:\Users\Moran\Desktop\Code\Deep-Reinforcement-Learning-Algorithms-with-MindSpore\agents\Base_Agent.py:452/        if self.y_range:/
subgraph @construct.Default.464 parent: [subgraph @construct.Default.462]() {

#------------------------> 1
  %1(x) = $(construct.Default.462):call @construct.SequentialCell.465(%para1_x)
      : (<Tensor[Float32], (1, 4)>) -> (<null>)
      #scope: (Default)
      # In file C:\Users\Moran\Desktop\Code\Deep-Reinforcement-Learning-Algorithms-with-MindSpore\agents\Base_Agent.py:451/        x = self.nets(x)/
  Return(%1)
      : (<null>)
      #scope: (Default)
      # In file C:\Users\Moran\Desktop\Code\Deep-Reinforcement-Learning-Algorithms-with-MindSpore\agents\Base_Agent.py:452/        if self.y_range:/
}
# Order:
#   1: @construct.Default.464:[CNode]481{[0]: ValueNode<Primitive> Return, [1]: x}


subgraph attr:
subgraph instance: construct.SequentialCell.465 : 0000022657DE2DC0
# In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:285/    def construct(self, input_data):/
subgraph @construct.SequentialCell.465 parent: [subgraph @construct.Default.462](%para8_input_data) {

#------------------------> 2
  %1([CNode]482) = call @construct.SequentialCell.466(I64(0), %para8_input_data)
      : (<Int64, NoShape>, <Tensor[Float32], (1, 4)>) -> (<null>)
      #scope: (Default/nets-SequentialCell)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:286/        for cell in self.cell_list:/
  Return(%1)
      : (<null>)
      #scope: (Default/nets-SequentialCell)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:286/        for cell in self.cell_list:/
}
# Order:
#   1: @construct.SequentialCell.465:[CNode]483{[0]: ValueNode<FuncGraph> ms_len_with_iterable_check.484, [1]: [CNode]485}
#   2: @construct.SequentialCell.465:[CNode]482{[0]: ValueNode<FuncGraph> construct.SequentialCell.466, [1]: ValueNode<Int64Imm> 0, [2]: input_data}
#   3: @construct.SequentialCell.465:[CNode]486{[0]: ValueNode<Primitive> Return, [1]: [CNode]482}


subgraph attr:
subgraph instance: construct.SequentialCell.466 : 0000022657DEAD40
# In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:286/        for cell in self.cell_list:/
subgraph @construct.SequentialCell.466 parent: [subgraph @construct.SequentialCell.465](%para9_, %para10_) {
  %1([CNode]485) = $(construct.SequentialCell.465):MakeTuple(call @construct.Dense.469, call @construct.ReLU.487, call @construct.Dropout.488, call @construct.Dense.489, call @construct.ReLU.487, call @construct.Dropout.490, call @construct.Dense.491)
      : (<Func, NoShape>, <Func, NoShape>, <Func, NoShape>, <Func, NoShape>, <Func, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Tuple[Func*7], TupleShape(NoShape, NoShape, NoShape, NoShape, NoShape, NoShape, NoShape)>)
      #scope: (Default/nets-SequentialCell)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:286/        for cell in self.cell_list:/
  %2([CNode]483) = $(construct.SequentialCell.465):call @ms_len_with_iterable_check.484(%1)
      : (<Tuple[Func*7], TupleShape(NoShape, NoShape, NoShape, NoShape, NoShape, NoShape, NoShape)>) -> (<Int64, NoShape>)
      #scope: (Default/nets-SequentialCell)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:286/        for cell in self.cell_list:/
  %3([CNode]492) = MultitypeFuncGraph-less{(Number, Number), (String, String), (Tuple, Tuple), (Tensor, Tensor), (Number, Tensor), (Tensor, Number), (List, List)}(%para9_@[CNode]467, %2)
      : (<Int64, NoShape>, <Int64, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/nets-SequentialCell)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:286/        for cell in self.cell_list:/
  %4([CNode]493) = Switch(%3, call @construct.SequentialCell.468, call @construct.SequentialCell.494)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/nets-SequentialCell)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:286/        for cell in self.cell_list:/

#------------------------> 3
  %5([CNode]495) = %4()
      #scope: (Default/nets-SequentialCell)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:286/        for cell in self.cell_list:/
  Return(%5)
      : (<null>)
      #scope: (Default/nets-SequentialCell)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:286/        for cell in self.cell_list:/
}
# Order:
#   1: @construct.SequentialCell.466:[CNode]492{[0]: ValueNode<MultitypeFuncGraph> MetaFuncGraph-less.111, [1]: @[CNode]467, [2]: [CNode]483}
#   2: @construct.SequentialCell.466:[CNode]493{[0]: ValueNode<Primitive> Switch, [1]: [CNode]492, [2]: ValueNode<FuncGraph> construct.SequentialCell.468, [3]: ValueNode<FuncGraph> construct.SequentialCell.494}
#   3: @construct.SequentialCell.466:[CNode]495{[0]: [CNode]493}
#   4: @construct.SequentialCell.466:[CNode]496{[0]: ValueNode<Primitive> Return, [1]: [CNode]495}


subgraph attr:
subgraph instance: construct.SequentialCell.468 : 0000022657DE5D90
# In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:286/        for cell in self.cell_list:/
subgraph @construct.SequentialCell.468 parent: [subgraph @construct.SequentialCell.466]() {
  %1([CNode]467) = MultitypeFuncGraph-add{(Number, Number), (String, String), (Tensor, Tuple), (Number, Tensor), (Tensor, Number), (List, Tensor), (Tuple, Tensor), (NoneType, NoneType), (Tensor, List), (List, List), (Tensor, Tensor), (RowTensor, Tensor), (COOTensor, COOTensor), (Tuple, Tuple), (CSRTensor, CSRTensor), (COOTensor, Tensor), (Tensor, COOTensor)}(%para9_@[CNode]467, I64(1))
      : (<Int64, NoShape>, <Int64, NoShape>) -> (<Int64, NoShape>)
      #scope: (Default/nets-SequentialCell)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:286/        for cell in self.cell_list:/
  %2([CNode]497) = StopGradient(%1)
      : (<Int64, NoShape>) -> (<Int64, NoShape>)
      #scope: (Default/nets-SequentialCell)
      # In file C:\Users\Moran\Desktop\Code\Deep-Reinforcement-Learning-Algorithms-with-MindSpore\agents\Base_Agent.py:451/        x = self.nets(x)/
  %3([CNode]485) = $(construct.SequentialCell.465):MakeTuple(call @construct.Dense.469, call @construct.ReLU.487, call @construct.Dropout.488, call @construct.Dense.489, call @construct.ReLU.487, call @construct.Dropout.490, call @construct.Dense.491)
      : (<Func, NoShape>, <Func, NoShape>, <Func, NoShape>, <Func, NoShape>, <Func, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Tuple[Func*7], TupleShape(NoShape, NoShape, NoShape, NoShape, NoShape, NoShape, NoShape)>)
      #scope: (Default/nets-SequentialCell)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:286/        for cell in self.cell_list:/
  %4([CNode]499) = call @ms_iter.498(%3)
      : (<Tuple[Func*7], TupleShape(NoShape, NoShape, NoShape, NoShape, NoShape, NoShape, NoShape)>) -> (<Tuple[Func*7], TupleShape(NoShape, NoShape, NoShape, NoShape, NoShape, NoShape, NoShape)>)
      #scope: (Default/nets-SequentialCell)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:286/        for cell in self.cell_list:/
  %5(cell) = S-Prim-getitem(%4, %para9_@[CNode]467)
      : (<Tuple[Func*7], TupleShape(NoShape, NoShape, NoShape, NoShape, NoShape, NoShape, NoShape)>, <Int64, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/nets-SequentialCell)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:286/        for cell in self.cell_list:/

#------------------------> 4
  %6(input_data) = %5(%para10_phi-input_data)
      : (<Tensor[Float32], (1, 4)>) -> (<null>)
      #scope: (Default/nets-SequentialCell)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:287/            input_data = cell(input_data)/
  %7([CNode]500) = call @construct.SequentialCell.466(%1, %6)
      : (<Int64, NoShape>, <null>) -> (<null>)
      #scope: (Default/nets-SequentialCell)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:286/        for cell in self.cell_list:/
  %8([CNode]501) = Depend[side_effect_propagate=I64(1)](%7, %2)
      : (<null>, <Int64, NoShape>) -> (<null>)
      #scope: (Default/nets-SequentialCell)
      # In file C:\Users\Moran\Desktop\Code\Deep-Reinforcement-Learning-Algorithms-with-MindSpore\agents\Base_Agent.py:451/        x = self.nets(x)/
  Return(%8)
      : (<null>)
      #scope: (Default/nets-SequentialCell)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:286/        for cell in self.cell_list:/
}
# Order:
#   1: @construct.SequentialCell.468:[CNode]499{[0]: ValueNode<FuncGraph> ms_iter.498, [1]: [CNode]485}
#   2: @construct.SequentialCell.468:cell{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]499, [2]: @[CNode]467}
#   3: @construct.SequentialCell.468:[CNode]467{[0]: ValueNode<MultitypeFuncGraph> MetaFuncGraph-add.118, [1]: @[CNode]467, [2]: ValueNode<Int64Imm> 1}
#   4: @construct.SequentialCell.468:input_data{[0]: cell, [1]: phi-input_data}
#   5: @construct.SequentialCell.468:[CNode]500{[0]: ValueNode<FuncGraph> construct.SequentialCell.466, [1]: [CNode]467, [2]: input_data}
#   6: @construct.SequentialCell.468:[CNode]502{[0]: ValueNode<Primitive> Return, [1]: [CNode]501}


subgraph attr:
subgraph instance: construct.Dense.469 : 0000022657DEB290
# In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:590/    def construct(self, x):/
subgraph @construct.Dense.469 parent: [subgraph @construct.Default.462](%para11_x) {

#------------------------> 5
  %1([CNode]503) = call @L-construct.Dense.470(%para11_x, %para2_nets.0.bias, %para3_nets.0.weight)
      : (<Tensor[Float32], (1, 4)>, <Ref[Tensor[Float32]], (128)>, <Ref[Tensor[Float32]], (128, 3)>) -> (<null>)
      #scope: (Default)
  Return(%1)
      : (<null>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:593/        if len(x_shape) != 2:/
}
# Order:
#   1: @construct.Dense.469:[CNode]503{[0]: ValueNode<FuncGraph> L-construct.Dense.470, [1]: x, [2]: nets.0.bias, [3]: nets.0.weight}
#   2: @construct.Dense.469:[CNode]504{[0]: ValueNode<Primitive> Return, [1]: [CNode]503}


subgraph attr:
subgraph instance: L-construct.Dense.470 : 0000022657DCA4A0
# In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:590/    def construct(self, x):/
subgraph @L-construct.Dense.470(%para12_x, %para13_, %para14_) {
  %1(phi-x_shape) = S-Prim-Shape(%para12_x)
      : (<Tensor[Float32], (1, 4)>) -> (<Tuple[Int64*2], TupleShape(NoShape, NoShape)>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:600/        if len(x_shape) != 2:/
  %2([CNode]505) = S-Prim-check_dense_input_shape[constexpr_prim=Bool(1)](%1, "Dense")
      : (<Tuple[Int64*2], TupleShape(NoShape, NoShape)>, <String, NoShape>) -> (<None, NoShape>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:592/        check_dense_input_shape(x_shape, self.cls_name)/
  %3([CNode]506) = StopGradient(%2)
      : (<None, NoShape>) -> (<None, NoShape>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:286/        for cell in self.cell_list:/
  %4([CNode]508) = call @L-ms_len.507(%1)
      : (<Tuple[Int64*2], TupleShape(NoShape, NoShape)>) -> (<Int64, NoShape>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:593/        if len(x_shape) != 2:/
  %5([CNode]509) = S-Prim-not_equal(%4, I64(2))
      : (<Int64, NoShape>, <Int64, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:593/        if len(x_shape) != 2:/
  %6([CNode]511) = call @L-bool_.510(%5)
      : (<Bool, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:593/        if len(x_shape) != 2:/
  %7([CNode]512) = Switch(%6, call @L-construct.Dense.513, call @L-construct.Dense.514)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:593/        if len(x_shape) != 2:/
  %8([CNode]515) = %7()
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:593/        if len(x_shape) != 2:/

#------------------------> 6
  %9([CNode]516) = call @L-construct.Dense.471(%8)
      : (<Tensor[Float32], (1, 4)>) -> (<null>)
      #scope: (Default/nets-SequentialCell)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:286/        for cell in self.cell_list:/
  %10([CNode]517) = Depend[side_effect_propagate=I64(1)](%9, %3)
      : (<null>, <None, NoShape>) -> (<null>)
      #scope: (Default/nets-SequentialCell)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:286/        for cell in self.cell_list:/
  Return(%10)
      : (<null>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:593/        if len(x_shape) != 2:/
}
# Order:
#   1: @L-construct.Dense.470:phi-x_shape{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Shape, [1]: x}
#   2: @L-construct.Dense.470:[CNode]505{[0]: ValueNode<DoSignaturePrimitive> S-Prim-check_dense_input_shape, [1]: phi-x_shape, [2]: ValueNode<StringImm> Dense}
#   3: @L-construct.Dense.470:[CNode]508{[0]: ValueNode<FuncGraph> L-ms_len.507, [1]: phi-x_shape}
#   4: @L-construct.Dense.470:[CNode]509{[0]: ValueNode<DoSignaturePrimitive> S-Prim-not_equal, [1]: [CNode]508, [2]: ValueNode<Int64Imm> 2}
#   5: @L-construct.Dense.470:[CNode]511{[0]: ValueNode<FuncGraph> L-bool_.510, [1]: [CNode]509}
#   6: @L-construct.Dense.470:[CNode]512{[0]: ValueNode<Primitive> Switch, [1]: [CNode]511, [2]: ValueNode<FuncGraph> L-construct.Dense.513, [3]: ValueNode<FuncGraph> L-construct.Dense.514}
#   7: @L-construct.Dense.470:[CNode]515{[0]: [CNode]512}
#   8: @L-construct.Dense.470:[CNode]516{[0]: ValueNode<FuncGraph> L-construct.Dense.471, [1]: [CNode]515}
#   9: @L-construct.Dense.470:[CNode]517{[0]: ValueNode<Primitive> Depend, [1]: [CNode]516, [2]: [CNode]506}
#  10: @L-construct.Dense.470:[CNode]504{[0]: ValueNode<Primitive> Return, [1]: [CNode]517}


subgraph attr:
after_block : 1
subgraph instance: L-construct.Dense.471 : 0000022657DCEF00
# In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:593/        if len(x_shape) != 2:/
subgraph @L-construct.Dense.471 parent: [subgraph @L-construct.Dense.470](%para15_) {
  %1([CNode]518) = call @L-bool_.510(Bool(1))
      : (<Bool, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:596/        if self.has_bias:/
  %2([CNode]519) = Switch(%1, call @L-construct.Dense.472, call @L-construct.Dense.520)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:596/        if self.has_bias:/

#------------------------> 7
  %3([CNode]521) = %2()
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:596/        if self.has_bias:/
  %4([CNode]523) = call @L-construct.Dense.522(%3)
      : (<null>) -> (<null>)
      #scope: (Default/nets-SequentialCell)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\container.py:286/        for cell in self.cell_list:/
  Return(%4)
      : (<null>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:596/        if self.has_bias:/
}
# Order:
#   1: @L-construct.Dense.471:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-MatMul, [1]: phi-x, [2]: L-nets.0.weight}
#   2: @L-construct.Dense.471:[CNode]518{[0]: ValueNode<FuncGraph> L-bool_.510, [1]: ValueNode<BoolImm> true}
#   3: @L-construct.Dense.471:[CNode]519{[0]: ValueNode<Primitive> Switch, [1]: [CNode]518, [2]: ValueNode<FuncGraph> L-construct.Dense.472, [3]: ValueNode<FuncGraph> L-construct.Dense.520}
#   4: @L-construct.Dense.471:[CNode]521{[0]: [CNode]519}
#   5: @L-construct.Dense.471:[CNode]523{[0]: ValueNode<FuncGraph> L-construct.Dense.522, [1]: [CNode]521}
#   6: @L-construct.Dense.471:[CNode]524{[0]: ValueNode<Primitive> Return, [1]: [CNode]523}


subgraph attr:
subgraph instance: L-construct.Dense.472 : 0000022657DCE460
# In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:596/        if self.has_bias:/
subgraph @L-construct.Dense.472 parent: [subgraph @L-construct.Dense.471]() {

#------------------------> 8
  %1(x) = $(L-construct.Dense.471):S-Prim-MatMul[transpose_a=Bool(0), input_names=["x1", "x2"], transpose_b=Bool(1), output_names=["output"], transpose_x1=Bool(0), transpose_x2=Bool(1)](%para15_phi-x, %para14_L-nets.0.weight)
      : (<Tensor[Float32], (1, 4)>, <Ref[Tensor[Float32]], (128, 3)>) -> (<null>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:595/        x = self.matmul(x, self.weight)/
  %2(x) = S-Prim-BiasAdd[format="NCHW", input_names=["x", "b"], output_names=["output"], data_format="NCHW"](%1, %para13_L-nets.0.bias)
      : (<null>, <Ref[Tensor[Float32]], (128)>) -> (<null>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:597/            x = self.bias_add(x, self.bias)/
  Return(%2)
      : (<null>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file C:\Users\Moran\.conda\envs\mindspore\lib\site-packages\mindspore\nn\layer\basic.py:596/        if self.has_bias:/
}
# Order:
#   1: @L-construct.Dense.472:x{[0]: ValueNode<DoSignaturePrimitive> S-Prim-BiasAdd, [1]: x, [2]: L-nets.0.bias}
#   2: @L-construct.Dense.472:[CNode]525{[0]: ValueNode<Primitive> Return, [1]: x}


#===============================================================================
# num of function graphs in stack: 9/10 (Ignored 1 internal frames).
