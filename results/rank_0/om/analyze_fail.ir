# 1.This file shows the parsed IR info when graph evaluating failed to help find the problem.
# 2.You can search the last `------------------------>` to the node which is inferred failed.
# 3.Refer to https://www.mindspore.cn/search?inputValue=analyze_fail.ir to get more instructions.
# ===============================================================================

subgraph attr:
subgraph instance: construct.Default.25 : 0x152b31018
# In file /Users/moranvl/Code/Deep-Reinforcement-Learning-Algorithms-with-MindSpore/agents/Base_Agent.py:450/    def construct(self, x):/
subgraph @construct.Default.25(%para1_x, %para2_nets.0.bias, %para3_nets.0.weight, %para4_nets.3.bias, %para5_nets.3.weight, %para6_nets.6.bias, %para7_nets.6.weight) {
  %1([CNode]35) = call @bool_.34(())
      : (<Tuple[], TupleShape()>) -> (<Bool, NoShape>)
      #scope: (Default)
      # In file /Users/moranvl/Code/Deep-Reinforcement-Learning-Algorithms-with-MindSpore/agents/Base_Agent.py:452/        if self.y_range:/
  %2([CNode]36) = Switch(%1, call @✓construct.Default.37, call @✗construct.Default.27)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default)
      # In file /Users/moranvl/Code/Deep-Reinforcement-Learning-Algorithms-with-MindSpore/agents/Base_Agent.py:452/        if self.y_range:/

#------------------------> 0
  %3([CNode]38) = %2()
      #scope: (Default)
      # In file /Users/moranvl/Code/Deep-Reinforcement-Learning-Algorithms-with-MindSpore/agents/Base_Agent.py:452/        if self.y_range:/
  %4([CNode]40) = call @↓construct.Default.39(%3)
      : (<null>) -> (<null>)
      #scope: (Default)
  Return(%4)
      : (<null>)
      #scope: (Default)
      # In file /Users/moranvl/Code/Deep-Reinforcement-Learning-Algorithms-with-MindSpore/agents/Base_Agent.py:452/        if self.y_range:/
}
# Order:
#   1: @construct.Default.25:x{[0]: ValueNode<FuncGraph> construct.SequentialCell.28, [1]: x}
#   2: @construct.Default.25:[CNode]35{[0]: ValueNode<FuncGraph> bool_.34, [1]: ValueNode<ValueTuple> ()}
#   3: @construct.Default.25:[CNode]36{[0]: ValueNode<Primitive> Switch, [1]: [CNode]35, [2]: ValueNode<FuncGraph> ✓construct.Default.37, [3]: ValueNode<FuncGraph> ✗construct.Default.27}
#   4: @construct.Default.25:[CNode]38{[0]: [CNode]36}
#   5: @construct.Default.25:[CNode]40{[0]: ValueNode<FuncGraph> ↓construct.Default.39, [1]: [CNode]38}
#   6: @construct.Default.25:[CNode]41{[0]: ValueNode<Primitive> Return, [1]: [CNode]40}


subgraph attr:
subgraph instance: ✗construct.Default.27 : 0x152ba2418
# In file /Users/moranvl/Code/Deep-Reinforcement-Learning-Algorithms-with-MindSpore/agents/Base_Agent.py:452/        if self.y_range:/
subgraph @✗construct.Default.27 parent: [subgraph @construct.Default.25]() {

#------------------------> 1
  %1(x) = $(construct.Default.25):call @construct.SequentialCell.28(%para1_x)
      : (<Tensor[Float32], (1)>) -> (<null>)
      #scope: (Default)
      # In file /Users/moranvl/Code/Deep-Reinforcement-Learning-Algorithms-with-MindSpore/agents/Base_Agent.py:451/        x = self.nets(x)/
  Return(%1)
      : (<null>)
      #scope: (Default)
      # In file /Users/moranvl/Code/Deep-Reinforcement-Learning-Algorithms-with-MindSpore/agents/Base_Agent.py:452/        if self.y_range:/
}
# Order:
#   1: @✗construct.Default.27:[CNode]42{[0]: ValueNode<Primitive> Return, [1]: x}


subgraph attr:
subgraph instance: construct.SequentialCell.28 : 0x15497e818
# In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:285/    def construct(self, input_data):/
subgraph @construct.SequentialCell.28 parent: [subgraph @construct.Default.25](%para8_input_data) {

#------------------------> 2
  %1([CNode]43) = call @↵construct.SequentialCell.29(I64(0), %para8_input_data)
      : (<Int64, NoShape>, <Tensor[Float32], (1)>) -> (<null>)
      #scope: (Default/nets-SequentialCell)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  Return(%1)
      : (<null>)
      #scope: (Default/nets-SequentialCell)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
}
# Order:
#   1: @construct.SequentialCell.28:[CNode]44{[0]: ValueNode<FuncGraph> ms_len_with_iterable_check.45, [1]: [CNode]46}
#   2: @construct.SequentialCell.28:[CNode]43{[0]: ValueNode<FuncGraph> ↵construct.SequentialCell.29, [1]: ValueNode<Int64Imm> 0, [2]: input_data}
#   3: @construct.SequentialCell.28:[CNode]47{[0]: ValueNode<Primitive> Return, [1]: [CNode]43}


subgraph attr:
subgraph instance: ↵construct.SequentialCell.29 : 0x154932a18
# In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
subgraph @↵construct.SequentialCell.29 parent: [subgraph @construct.SequentialCell.28](%para9_, %para10_) {
  %1([CNode]46) = $(construct.SequentialCell.28):MakeTuple(call @construct.Dense.32, call @construct.ReLU.48, call @construct.Dropout.49, call @construct.Dense.50, call @construct.ReLU.48, call @construct.Dropout.51, call @construct.Dense.52)
      : (<Func, NoShape>, <Func, NoShape>, <Func, NoShape>, <Func, NoShape>, <Func, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Tuple[Func*7], TupleShape(NoShape, NoShape, NoShape, NoShape, NoShape, NoShape, NoShape)>)
      #scope: (Default/nets-SequentialCell)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  %2([CNode]44) = $(construct.SequentialCell.28):call @ms_len_with_iterable_check.45(%1)
      : (<Tuple[Func*7], TupleShape(NoShape, NoShape, NoShape, NoShape, NoShape, NoShape, NoShape)>) -> (<Int64, NoShape>)
      #scope: (Default/nets-SequentialCell)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  %3([CNode]53) = MultitypeFuncGraph-less{(String, String), (Number, Tensor), (Tensor, Tensor), (Tensor, Number), (Number, Number), (Tuple, Tuple), (List, List)}(%para9_@[CNode]30, %2)
      : (<Int64, NoShape>, <Int64, NoShape>) -> (<Bool, NoShape>)
      #scope: (Default/nets-SequentialCell)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  %4([CNode]54) = Switch(%3, call @↻construct.SequentialCell.31, call @↓construct.SequentialCell.55)
      : (<Bool, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/nets-SequentialCell)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/

#------------------------> 3
  %5([CNode]56) = %4()
      #scope: (Default/nets-SequentialCell)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  Return(%5)
      : (<null>)
      #scope: (Default/nets-SequentialCell)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
}
# Order:
#   1: @↵construct.SequentialCell.29:[CNode]53{[0]: ValueNode<MultitypeFuncGraph> MetaFuncGraph-less.57, [1]: @[CNode]30, [2]: [CNode]44}
#   2: @↵construct.SequentialCell.29:[CNode]54{[0]: ValueNode<Primitive> Switch, [1]: [CNode]53, [2]: ValueNode<FuncGraph> ↻construct.SequentialCell.31, [3]: ValueNode<FuncGraph> ↓construct.SequentialCell.55}
#   3: @↵construct.SequentialCell.29:[CNode]56{[0]: [CNode]54}
#   4: @↵construct.SequentialCell.29:[CNode]58{[0]: ValueNode<Primitive> Return, [1]: [CNode]56}


subgraph attr:
subgraph instance: ↻construct.SequentialCell.31 : 0x154982618
# In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
subgraph @↻construct.SequentialCell.31 parent: [subgraph @↵construct.SequentialCell.29]() {
  %1([CNode]30) = MultitypeFuncGraph-add{(Number, Tensor), (Number, Number), (Tuple, Tuple), (Tensor, List), (Tuple, Tensor), (Tensor, Tuple), (Tensor, Number), (COOTensor, COOTensor), (List, Tensor), (List, List), (Tensor, Tensor), (String, String), (COOTensor, Tensor), (RowTensor, Tensor), (NoneType, NoneType), (CSRTensor, CSRTensor), (Tensor, COOTensor)}(%para9_@[CNode]30, I64(1))
      : (<Int64, NoShape>, <Int64, NoShape>) -> (<Int64, NoShape>)
      #scope: (Default/nets-SequentialCell)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  %2([CNode]59) = StopGradient(%1)
      : (<Int64, NoShape>) -> (<Int64, NoShape>)
      #scope: (Default/nets-SequentialCell)
      # In file /Users/moranvl/Code/Deep-Reinforcement-Learning-Algorithms-with-MindSpore/agents/Base_Agent.py:451/        x = self.nets(x)/
  %3([CNode]46) = $(construct.SequentialCell.28):MakeTuple(call @construct.Dense.32, call @construct.ReLU.48, call @construct.Dropout.49, call @construct.Dense.50, call @construct.ReLU.48, call @construct.Dropout.51, call @construct.Dense.52)
      : (<Func, NoShape>, <Func, NoShape>, <Func, NoShape>, <Func, NoShape>, <Func, NoShape>, <Func, NoShape>, <Func, NoShape>) -> (<Tuple[Func*7], TupleShape(NoShape, NoShape, NoShape, NoShape, NoShape, NoShape, NoShape)>)
      #scope: (Default/nets-SequentialCell)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  %4([CNode]61) = call @ms_iter.60(%3)
      : (<Tuple[Func*7], TupleShape(NoShape, NoShape, NoShape, NoShape, NoShape, NoShape, NoShape)>) -> (<Tuple[Func*7], TupleShape(NoShape, NoShape, NoShape, NoShape, NoShape, NoShape, NoShape)>)
      #scope: (Default/nets-SequentialCell)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  %5(cell) = S-Prim-getitem(%4, %para9_@[CNode]30)
      : (<Tuple[Func*7], TupleShape(NoShape, NoShape, NoShape, NoShape, NoShape, NoShape, NoShape)>, <Int64, NoShape>) -> (<Func, NoShape>)
      #scope: (Default/nets-SequentialCell)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/

#------------------------> 4
  %6(input_data) = %5(%para10_фinput_data)
      : (<Tensor[Float32], (1)>) -> (<null>)
      #scope: (Default/nets-SequentialCell)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:287/            input_data = cell(input_data)/
  %7([CNode]62) = call @↵construct.SequentialCell.29(%1, %6)
      : (<Int64, NoShape>, <null>) -> (<null>)
      #scope: (Default/nets-SequentialCell)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  %8([CNode]63) = Depend[side_effect_propagate=I64(1)](%7, %2)
      : (<null>, <Int64, NoShape>) -> (<null>)
      #scope: (Default/nets-SequentialCell)
      # In file /Users/moranvl/Code/Deep-Reinforcement-Learning-Algorithms-with-MindSpore/agents/Base_Agent.py:451/        x = self.nets(x)/
  Return(%8)
      : (<null>)
      #scope: (Default/nets-SequentialCell)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
}
# Order:
#   1: @↻construct.SequentialCell.31:[CNode]61{[0]: ValueNode<FuncGraph> ms_iter.60, [1]: [CNode]46}
#   2: @↻construct.SequentialCell.31:cell{[0]: ValueNode<DoSignaturePrimitive> S-Prim-getitem, [1]: [CNode]61, [2]: @[CNode]30}
#   3: @↻construct.SequentialCell.31:[CNode]30{[0]: ValueNode<MultitypeFuncGraph> MetaFuncGraph-add.64, [1]: @[CNode]30, [2]: ValueNode<Int64Imm> 1}
#   4: @↻construct.SequentialCell.31:input_data{[0]: cell, [1]: фinput_data}
#   5: @↻construct.SequentialCell.31:[CNode]62{[0]: ValueNode<FuncGraph> ↵construct.SequentialCell.29, [1]: [CNode]30, [2]: input_data}
#   6: @↻construct.SequentialCell.31:[CNode]65{[0]: ValueNode<Primitive> Return, [1]: [CNode]63}


subgraph attr:
subgraph instance: construct.Dense.32 : 0x154984a18
# In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/basic.py:590/    def construct(self, x):/
subgraph @construct.Dense.32 parent: [subgraph @construct.Default.25](%para11_x) {

#------------------------> 5
  %1([CNode]66) = call @L-construct.Dense.33(%para11_x, %para2_nets.0.bias, %para3_nets.0.weight)
      : (<Tensor[Float32], (1)>, <Ref[Tensor[Float32]], (128)>, <Ref[Tensor[Float32]], (128, 1)>) -> (<null>)
      #scope: (Default)
  Return(%1)
      : (<null>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/basic.py:593/        if len(x_shape) != 2:/
}
# Order:
#   1: @construct.Dense.32:[CNode]66{[0]: ValueNode<FuncGraph> L-construct.Dense.33, [1]: x, [2]: nets.0.bias, [3]: nets.0.weight}
#   2: @construct.Dense.32:[CNode]67{[0]: ValueNode<Primitive> Return, [1]: [CNode]66}


subgraph attr:
subgraph instance: L-construct.Dense.33 : 0x15493bc18
# In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/basic.py:590/    def construct(self, x):/
subgraph @L-construct.Dense.33(%para12_x, %para13_, %para14_) {
  %1(фx_shape) = S-Prim-Shape(%para12_x)
      : (<Tensor[Float32], (1)>) -> (<Tuple[Int64], TupleShape(NoShape)>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/basic.py:600/        if len(x_shape) != 2:/

#------------------------> 6
  %2([CNode]68) = S-Prim-check_dense_input_shape[constexpr_prim=Bool(1)](%1, "Dense")
      : (<Tuple[Int64], TupleShape(NoShape)>, <String, NoShape>) -> (<null>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/basic.py:592/        check_dense_input_shape(x_shape, self.cls_name)/
  %3([CNode]69) = StopGradient(%2)
      : (<null>) -> (<null>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  %4([CNode]71) = call @L-ms_len.70(%1)
      : (<Tuple[Int64], TupleShape(NoShape)>) -> (<null>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/basic.py:593/        if len(x_shape) != 2:/
  %5([CNode]72) = S-Prim-not_equal(%4, I64(2))
      : (<null>, <null>) -> (<null>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/basic.py:593/        if len(x_shape) != 2:/
  %6([CNode]74) = call @L-bool_.73(%5)
      : (<null>) -> (<null>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/basic.py:593/        if len(x_shape) != 2:/
  %7([CNode]75) = Switch(%6, call @L-✓construct.Dense.76, call @L-✗construct.Dense.77)
      : (<null>, <null>, <null>) -> (<null>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/basic.py:593/        if len(x_shape) != 2:/
  %8([CNode]78) = %7()
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/basic.py:593/        if len(x_shape) != 2:/
  %9([CNode]80) = call @L-↓construct.Dense.79(%8)
      : (<null>) -> (<null>)
      #scope: (Default/nets-SequentialCell)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  %10([CNode]81) = Depend[side_effect_propagate=I64(1)](%9, %3)
      : (<null>, <null>) -> (<null>)
      #scope: (Default/nets-SequentialCell)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/container.py:286/        for cell in self.cell_list:/
  Return(%10)
      : (<null>)
      #scope: (Default/nets-SequentialCell/0-Dense)
      # In file /Users/moranvl/anaconda3/envs/mindspore/lib/python3.9/site-packages/mindspore/nn/layer/basic.py:593/        if len(x_shape) != 2:/
}
# Order:
#   1: @L-construct.Dense.33:фx_shape{[0]: ValueNode<DoSignaturePrimitive> S-Prim-Shape, [1]: x}
#   2: @L-construct.Dense.33:[CNode]68{[0]: ValueNode<DoSignaturePrimitive> S-Prim-check_dense_input_shape, [1]: фx_shape, [2]: ValueNode<StringImm> Dense}
#   3: @L-construct.Dense.33:[CNode]71{[0]: ValueNode<FuncGraph> L-ms_len.70, [1]: фx_shape}
#   4: @L-construct.Dense.33:[CNode]72{[0]: ValueNode<DoSignaturePrimitive> S-Prim-not_equal, [1]: [CNode]71, [2]: ValueNode<Int64Imm> 2}
#   5: @L-construct.Dense.33:[CNode]74{[0]: ValueNode<FuncGraph> L-bool_.73, [1]: [CNode]72}
#   6: @L-construct.Dense.33:[CNode]75{[0]: ValueNode<Primitive> Switch, [1]: [CNode]74, [2]: ValueNode<FuncGraph> L-✓construct.Dense.76, [3]: ValueNode<FuncGraph> L-✗construct.Dense.77}
#   7: @L-construct.Dense.33:[CNode]78{[0]: [CNode]75}
#   8: @L-construct.Dense.33:[CNode]80{[0]: ValueNode<FuncGraph> L-↓construct.Dense.79, [1]: [CNode]78}
#   9: @L-construct.Dense.33:[CNode]81{[0]: ValueNode<Primitive> Depend, [1]: [CNode]80, [2]: [CNode]69}
#  10: @L-construct.Dense.33:[CNode]67{[0]: ValueNode<Primitive> Return, [1]: [CNode]81}


#===============================================================================
# num of function graphs in stack: 7/8 (Ignored 1 internal frames).
